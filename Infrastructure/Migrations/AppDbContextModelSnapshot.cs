// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.ApiLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("IPAddress")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("RequestAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestByURL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RequestURL")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResponseAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("ApiLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Body")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("ID");

                    b.ToTable("EmailTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Body = "<!DOCTYPE html>  <html xmlns='http://www.w3.org/1999/xhtml'>  <head>      <link href='https://fonts.googleapis.com/css2?family=Roboto&display=swap'  rel='stylesheet' />      <style type='text/css'>            @font-face {              font-family: Roboto;              src: url('Roboto');               src: url('Roboto-webfont.eot?#iefix') format('embedded-opentype'), url('Roboto-webfont.woff')  format('woff'), url('Roboto-webfont.ttf') format('truetype'), url('Roboto-webfont.svg#Sri-TSCRegular') format('svg');     font-weight: normal;              font-style: normal;          }            body {              font-family: Roboto, serif;    font-size: 12px;              font-style: normal;              font-weight: 400;              padding: 0;      text-align: center;              background: #f6f6f6;          }            .bigscreen1 {              padding-bottom: 20px;    border-left: 40px solid #006aff;              border-right: 40px solid #006aff;          }            .bigscreen {     padding-bottom: 20px;              border-left: 40px solid #006aff;              border-right: 40px solid #006aff;      border-top: 30px solid #006aff;          }          .innertablewidth {              width: 60%;          }    @media only screen and (max-width: 600px) {              .bigscreen {                  padding-bottom: 20px;     border-left: 0;                  border-right: 0;                  border-top: 0;              }                .bigscreen1 {    padding-bottom: 20px;                  border-left: 0;                  border-right: 0;              }    .innertablewidth {                  width: 90%;              }          }      </style>      <meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />      <meta name='viewport' content='width=device-width, initial-scale=1.0' />  </head>  <body>    <table border='0' cellpadding='0' cellspacing='0' width='100%'>            <tr>              <td style='padding-bottom: 30px; padding-top: 10px; background: #f6f6f6'>                   <table class='innertablewidth' align='center' border='0' cellpadding='0' cellspacing='0'>                 <tr>                            <td style='padding-top:10px; background-color: #006aff'></td>              </tr>                      <tr>                              <td align='center' bgcolor='#ffffff' class='bigscreen' style='padding-top:30px;'>      <P style='padding-top:5px; padding-left: 10px;padding-right: 10px;width: 100%;max-width: 255px;font-size: 25px;'>   <b>Medteq</b> </p>                           </td>                        </tr>                      <tr>       <td align='center' bgcolor='#ffffff' class='bigscreen1' style='color: #006aff; font-weight: bold; font-size: 24px;  line-height: 29px; padding-top: 15px;'>                                Hi [First Name]                           </td>                      </tr>                      <tr>                            <td bgcolor='#ffffff' style='padding-bottom: 30px; padding-right: 40px; padding-left: 40px;'>   <table border='0' cellpadding='0' cellspacing='0' width='100%'>                                  <tr>      <td style='padding-top:20px; font-size: 16px; line-height: 23px; color: #000000; text-align:left;'>          We’ve received a request to reset your password, if you did not submit this request please ignore this email.   Click on the link below to reset your password..<br/> <b><a href='[URL]'</a>Click Here</b>      </td>                                  </tr>                                    <tr>       <td style='padding-top:20px; color: #000; font-weight: 500; font-size: 16px;line-height:19px; text-align:left;'>   </td>                                  </tr>                                   <tr>                 <td align='center' style='padding-top:30px; font-weight: 400; letter-spacing: 0px; font-size: 32px; line-height: 38px;  color: #006aff;'>                                            Have a great day,                                      </td>     </tr>                                  <tr>                                         <td align='center' style='padding-bottom:15px; font-weight: 900; letter-spacing: 0px; font-size: 32px; line-height: 38px; color: #006aff;'>                                            The Medteq                                      </td>                                  </tr>                              </table>                          </td>                      </tr>                  </table>              </td>            </tr>      </table>  </body></html>",
                            Description = "Reset Password Email",
                            Name = "Reset_Password_Email",
                            Subject = "Reset Password Email"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Entity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ExceptionLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestJSON")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID");

                    b.ToTable("ExceptionLog", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fileSize");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fileType");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("fileURL");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RecordID")
                        .HasColumnType("int");

                    b.Property<int>("fk_EntityID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_EntityID");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Gender", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Value = "Male"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Value = "Female"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Value = "Other"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Code = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Code = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Code = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Code = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            ID = 5,
                            Active = true,
                            Code = "CA",
                            Name = "California"
                        },
                        new
                        {
                            ID = 6,
                            Active = true,
                            Code = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            ID = 7,
                            Active = true,
                            Code = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            ID = 8,
                            Active = true,
                            Code = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            ID = 9,
                            Active = true,
                            Code = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            ID = 10,
                            Active = true,
                            Code = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            ID = 11,
                            Active = true,
                            Code = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            ID = 12,
                            Active = true,
                            Code = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            ID = 13,
                            Active = true,
                            Code = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            ID = 14,
                            Active = true,
                            Code = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            ID = 15,
                            Active = true,
                            Code = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            ID = 16,
                            Active = true,
                            Code = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            ID = 17,
                            Active = true,
                            Code = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            ID = 18,
                            Active = true,
                            Code = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            ID = 19,
                            Active = true,
                            Code = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            ID = 20,
                            Active = true,
                            Code = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            ID = 21,
                            Active = true,
                            Code = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            ID = 22,
                            Active = true,
                            Code = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            ID = 23,
                            Active = true,
                            Code = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            ID = 24,
                            Active = true,
                            Code = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            ID = 25,
                            Active = true,
                            Code = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            ID = 26,
                            Active = true,
                            Code = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            ID = 27,
                            Active = true,
                            Code = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            ID = 28,
                            Active = true,
                            Code = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            ID = 29,
                            Active = true,
                            Code = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            ID = 30,
                            Active = true,
                            Code = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            ID = 31,
                            Active = true,
                            Code = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            ID = 32,
                            Active = true,
                            Code = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            ID = 33,
                            Active = true,
                            Code = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            ID = 34,
                            Active = true,
                            Code = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            ID = 35,
                            Active = true,
                            Code = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            ID = 36,
                            Active = true,
                            Code = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            ID = 37,
                            Active = true,
                            Code = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            ID = 38,
                            Active = true,
                            Code = "PA",
                            Name = "Pennsylvania["
                        },
                        new
                        {
                            ID = 39,
                            Active = true,
                            Code = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            ID = 40,
                            Active = true,
                            Code = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            ID = 41,
                            Active = true,
                            Code = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            ID = 42,
                            Active = true,
                            Code = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            ID = 43,
                            Active = true,
                            Code = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            ID = 44,
                            Active = true,
                            Code = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            ID = 45,
                            Active = true,
                            Code = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            ID = 46,
                            Active = true,
                            Code = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            ID = 47,
                            Active = true,
                            Code = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            ID = 48,
                            Active = true,
                            Code = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            ID = 49,
                            Active = true,
                            Code = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            ID = 50,
                            Active = true,
                            Code = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingCategory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("ID");

                    b.ToTable("SystemSettings", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Label = "From Mail",
                            SettingCategory = "EmailSetting",
                            SettingKey = "NotificationFromMailAddress",
                            SettingName = "FromMail",
                            SettingValue = "medteqreporteq@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            Active = true,
                            Label = "Smtp Client",
                            SettingCategory = "EmailSetting",
                            SettingKey = "SMTPClient",
                            SettingName = "SmtpClient",
                            SettingValue = "smtp.gmail.com"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Label = "Smtp Port",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp Port",
                            SettingName = "SmtpPort",
                            SettingValue = "587"
                        },
                        new
                        {
                            ID = 4,
                            Active = true,
                            Label = "Smtp User",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp User Name",
                            SettingName = "SmtpUser",
                            SettingValue = "medteqreporteq@gmail.com"
                        },
                        new
                        {
                            ID = 5,
                            Active = true,
                            Label = "Smtp Password",
                            SettingCategory = "EmailSetting",
                            SettingKey = "Smtp Password",
                            SettingName = "SmtpPassword",
                            SettingValue = "medteqreporteq@1"
                        },
                        new
                        {
                            ID = 6,
                            Active = true,
                            Label = "URL Expiry Time",
                            SettingCategory = "GeneralSetting",
                            SettingKey = "Expiry Time",
                            SettingName = "URLExpiryTime",
                            SettingValue = "32"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime?>("PasswordRequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordRequestHash")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.HasKey("ID");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2023, 6, 1, 11, 23, 53, 353, DateTimeKind.Utc).AddTicks(7581),
                            Email = "admin@mail.com",
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Admin",
                            ModifiedBy = 0,
                            ModifiedDate = new DateTime(2023, 6, 1, 11, 23, 53, 353, DateTimeKind.Utc).AddTicks(7581),
                            Password = "$2a$11$..uxlbXXP.MHHwioGquxQeOIEtsCcG.yXFuJ.oRoj3Q2m7rwoTMlG"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserToRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("fk_RoleID")
                        .HasColumnType("int");

                    b.Property<int>("fk_UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("fk_RoleID");

                    b.HasIndex("fk_UserID");

                    b.ToTable("UserToRole", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            fk_RoleID = 1,
                            fk_UserID = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.File", b =>
                {
                    b.HasOne("Domain.Entities.Entity", "Entity")
                        .WithMany("Files")
                        .HasForeignKey("fk_EntityID")
                        .IsRequired()
                        .HasConstraintName("FK_File_Entity");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("Domain.Entities.UserToRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("UserToRoles")
                        .HasForeignKey("fk_RoleID")
                        .IsRequired()
                        .HasConstraintName("FK_UserToRole_Role");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("fk_UserID")
                        .IsRequired()
                        .HasConstraintName("FK_UserToRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Entity", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserToRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
